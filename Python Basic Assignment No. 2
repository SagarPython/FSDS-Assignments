1.What are the two values of the Boolean data type? How do you write them?
Ans: The two values of Boolean are true and false they are written as "True" and "False"

2.What are the three different types of Boolean operators?
Ans: The 3 types of Operators are AND, OR and NOT

3.Make a list of each Boolean operator's truth tables (i.e. every possible combination of Boolean values for the operator and what it evaluate ).
Ans:  
    1. True and True is True.
    2. False and True is False.
    3. True and False is False.
    4. False and False is False.
    5. True or True is True.
    6. False or True is True.
    7. True or False is True.
    8. False or False is False.
    9. not True is False.
    10. not False is True.
    
4. What are the values of the following expressions?
    1. (5 > 4) and (3 == 5); Ans: False
    2. not (5 > 4); Ans: False
    3. (5>4) or (3==5); Ans: True
    4. not ((5 > 4) or (3 == 5)); Ans: False
    5. (True and True) and (True==False); Ans: False
    6. (not(False))or(not(True); Ans: True
    
 5. What are the six comparison operators?   
    Ans: 1. < (lesser than)
         2. > (greater than)
         3. <= (lesser than or equal to)
         4. >= (greater than or equal to)
         5. == (equal)
         6. != (not equal)
         
 6. How do you tell the difference between the equal to and assignment operators?Describe a condition and when you would use one.
     Ans: = is the assignment operator that stores a value in a variable, whereas == is the equal operator which compares 2 values
     
     CODE
     
     #Assignment Operator
     
     a = 1
     print ('a')
     
     OUTPUT:
     1
     
     #Equals to Operator
     if (1==2):
        print("True")
     else
        Print("False")
        
      OUTPUT:
      False
      
   7. Identify the three blocks in this code:
       spam = 0
       if spam == 10:
           print('eggs') 
       if spam > 5:
           print('bacon') 
       else:
            print('ham') 
            print('spam')
            print('spam')
            
        ANS:   spam = 0
               if spam == 10:
                  print('eggs') #Block 1
               if spam > 5:
                  print('bacon') #Block 2
               else:
                  print('ham') #Block 3
                  print('spam')
                  print('spam')
            
    8. Write code that prints Hello if 1 is stored in spam, prints Howdy if 2 is stored in spam, and prints Greetings! if anything else is stored in spam. 
      
       Ans:
       spam = int(input("Enter any No. "))
       if spam == 1:
          print("Hello")
       elif spam == 2:
          print ("Howdy")
       else: 
          print("Greetings!") 
          
     9. If your programme is stuck in an endless loop, what keys youâ€™ll press?
        Ans: ctrl + c 
        
     10. How can you tell the difference between break and continue?
        Ans: 
        
        Break Statement
        
        The Python break statement stops the loop in which the statement is placed. When a break statement is executed,
        the statements after the contents of the loop are executed.
        A break statement can be placed inside a nested loop. If a break statement appears in a nested loop, only the inner loop will stop executing. 
        The outer loop will continue to execute until all iterations have occurred, or until the outer loop is broken using a break statement.
        
        Continue Statement
        
        The continue statement instructs a loop to continue to the next iteration.
        Any code that follows the continue statement is not executed. Unlike a break statement, a continue statement does not completely halt a loop.
        
        You can use a continue statement in Python to skip over part of a loop when a condition is met.
        Then, the rest of a loop will continue running. You use continue statements within loops, usually after an if statement.
